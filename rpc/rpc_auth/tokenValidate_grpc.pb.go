// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: tokenValidate.proto

package rpc_auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ValidateTokenService_Validate_FullMethodName = "/rpc_auth.ValidateTokenService/Validate"
)

// ValidateTokenServiceClient is the client API for ValidateTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidateTokenServiceClient interface {
	Validate(ctx context.Context, opts ...grpc.CallOption) (ValidateTokenService_ValidateClient, error)
}

type validateTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidateTokenServiceClient(cc grpc.ClientConnInterface) ValidateTokenServiceClient {
	return &validateTokenServiceClient{cc}
}

func (c *validateTokenServiceClient) Validate(ctx context.Context, opts ...grpc.CallOption) (ValidateTokenService_ValidateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ValidateTokenService_ServiceDesc.Streams[0], ValidateTokenService_Validate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &validateTokenServiceValidateClient{ClientStream: stream}
	return x, nil
}

type ValidateTokenService_ValidateClient interface {
	Send(*ValidateTokenRequest) error
	Recv() (*ValidateTokenResponse, error)
	grpc.ClientStream
}

type validateTokenServiceValidateClient struct {
	grpc.ClientStream
}

func (x *validateTokenServiceValidateClient) Send(m *ValidateTokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validateTokenServiceValidateClient) Recv() (*ValidateTokenResponse, error) {
	m := new(ValidateTokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValidateTokenServiceServer is the server API for ValidateTokenService service.
// All implementations must embed UnimplementedValidateTokenServiceServer
// for forward compatibility
type ValidateTokenServiceServer interface {
	Validate(ValidateTokenService_ValidateServer) error
	mustEmbedUnimplementedValidateTokenServiceServer()
}

// UnimplementedValidateTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedValidateTokenServiceServer struct {
}

func (UnimplementedValidateTokenServiceServer) Validate(ValidateTokenService_ValidateServer) error {
	return status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedValidateTokenServiceServer) mustEmbedUnimplementedValidateTokenServiceServer() {}

// UnsafeValidateTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidateTokenServiceServer will
// result in compilation errors.
type UnsafeValidateTokenServiceServer interface {
	mustEmbedUnimplementedValidateTokenServiceServer()
}

func RegisterValidateTokenServiceServer(s grpc.ServiceRegistrar, srv ValidateTokenServiceServer) {
	s.RegisterService(&ValidateTokenService_ServiceDesc, srv)
}

func _ValidateTokenService_Validate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidateTokenServiceServer).Validate(&validateTokenServiceValidateServer{ServerStream: stream})
}

type ValidateTokenService_ValidateServer interface {
	Send(*ValidateTokenResponse) error
	Recv() (*ValidateTokenRequest, error)
	grpc.ServerStream
}

type validateTokenServiceValidateServer struct {
	grpc.ServerStream
}

func (x *validateTokenServiceValidateServer) Send(m *ValidateTokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validateTokenServiceValidateServer) Recv() (*ValidateTokenRequest, error) {
	m := new(ValidateTokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValidateTokenService_ServiceDesc is the grpc.ServiceDesc for ValidateTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidateTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_auth.ValidateTokenService",
	HandlerType: (*ValidateTokenServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Validate",
			Handler:       _ValidateTokenService_Validate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tokenValidate.proto",
}
